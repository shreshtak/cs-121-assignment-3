DELIVERABLE/SUBMISSION
- project writeup pg 7: Come up with a set of at least 20 queries that guide you in evaluating
how well your search engine performs, both in terms of ranking performance
(effectiveness) and in terms of runtime performance (efficiency). At least half of
those queries should be chosen because they do poorly on one or both criteria;
the other half should do well. 
    - put it in TEST.txt file (no need to report results)
    - with comments on which ones started by doing poorly and explanations of what you did to make them perform better.
- project writeup pg 7: README.txt file describing how to use
your software (i.e. at lesat: how to run the code that creates the index,
how to start the search interface and how to perform a simple query) 
- don't include index files in zip
- in person demo




INDEXER
- project writeup pg 2: Important text: text in bold (b, strong), in headings (h1, h2, h3), and
in titles should be treated as more important than the in other places. Verify which are the relevant
HTML tags to select the important words.
- project writeup pg 4: Your indexer must off load the inverted index hash map from main memory to a 
partial index on disk at least 3 times during index construction; those partial indexes should be merged in the end.
    - do we have to merge the entirety of the indices???
- lec 18 slide 27: split inverted index into alphabet ranges
- lec 20+21+22: tf-idf scoring with cosine similarity (lec 21 slide 33, slide 56)




SEARCHER
- lec 17 slide 32: query optimization: process merged posting lists for each term in ascending order of length
- lec 18 slide 5: timer to time query times (must be under 300ms)
- lec 18 slide 27: look into what this means: The search component needs to keep files open all the time. Note: the files 
are open, but not in memory!
- rank the results based on tf-dif and cosine similarity




EXTRA CREDIT
- Detect and eliminate duplicate pages. (1 pt for exact, 2 pts for near)
- Add HITS and Page Rank to ranking. (1.5 pts HITS, 2.5 for PR)
- Implement 2-gram and 3-gram indexing and use it in retrieval. (1 pt)
- Enhance the index with word positions and use them for retrieval. (2 pts)
- Index anchor words for the target pages. (1 pt).
- Implement a Web or local GUI interface instead of using the console. (1 pt for the local GUI, 2 pts for a web GUI)
    - flask (easier according to ed) or streamlit
- Implement the summarization of the resulting pages using the OpenAI API (or a local model using LangChain)
and show the short summaries in your web GUI (note: you need a web GUI for this bonus point!). (2 pts)